import {
  stringToGrid,
  isValidMove,
  solver,
  gridValues,
  units,
  peers,
  parseGrid,
  findMinSquare,
  valuesToStr,
  norvigSolve
} from './solver'

const easy = '8.9..7..61..6..87.37658.1......7..52...9.5...26..4......7.91268.24..3..79..7..5.3'
const hard = '..7..8.....6.2.3...3......9.1..5..6.....1.....7.9....2........4.83..4...26....51.'

const hardSolution = '957638421146729385832541679419352768628417953375986142791265834583174296264893517'
describe('norvig', () => {
  test('generate peers for a square', () => {
    expect(peers['A1']).toEqual(new Set([
      // cols
      "B1", "C1", "D1", "E1", "F1", "G1", "H1", "I1",
      // rows
      "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9",
      // square
      "B2", "B3", "C2", "C3"
    ]))
  })

  test('generate unitlist for a square', () => {
    expect(units['A1']).toEqual([
      [
        "A1",
        "B1",
        "C1",
        "D1",
        "E1",
        "F1",
        "G1",
        "H1",
        "I1",
      ],
      [
        "A1",
        "A2",
        "A3",
        "A4",
        "A5",
        "A6",
        "A7",
        "A8",
        "A9",
      ],
      [
        "A1",
        "A2",
        "A3",
        "B1",
        "B2",
        "B3",
        "C1",
        "C2",
        "C3",
      ],
    ])
  })
  test('convert grid to square hash map', () =>{
    expect(gridValues(hard)).toEqual({
      "A1": ".",
      "A2": ".",
      "A3": "7",
      "A4": ".",
      "A5": ".",
      "A6": "8",
      "A7": ".",
      "A8": ".",
      "A9": ".",
      "B1": ".",
      "B2": ".",
      "B3": "6",
      "B4": ".",
      "B5": "2",
      "B6": ".",
      "B7": "3",
      "B8": ".",
      "B9": ".",
      "C1": ".",
      "C2": "3",
      "C3": ".",
      "C4": ".",
      "C5": ".",
      "C6": ".",
      "C7": ".",
      "C8": ".",
      "C9": "9",
      "D1": ".",
      "D2": "1",
      "D3": ".",
      "D4": ".",
      "D5": "5",
      "D6": ".",
      "D7": ".",
      "D8": "6",
      "D9": ".",
      "E1": ".",
      "E2": ".",
      "E3": ".",
      "E4": ".",
      "E5": "1",
      "E6": ".",
      "E7": ".",
      "E8": ".",
      "E9": ".",
      "F1": ".",
      "F2": "7",
      "F3": ".",
      "F4": "9",
      "F5": ".",
      "F6": ".",
      "F7": ".",
      "F8": ".",
      "F9": "2",
      "G1": ".",
      "G2": ".",
      "G3": ".",
      "G4": ".",
      "G5": ".",
      "G6": ".",
      "G7": ".",
      "G8": ".",
      "G9": "4",
      "H1": ".",
      "H2": "8",
      "H3": "3",
      "H4": ".",
      "H5": ".",
      "H6": "4",
      "H7": ".",
      "H8": ".",
      "H9": ".",
      "I1": "2",
      "I2": "6",
      "I3": ".",
      "I4": ".",
      "I5": ".",
      "I6": ".",
      "I7": "5",
      "I8": "1",
      "I9": ".",
    })
  })

  test('parseGrid should return a hash map with all possible values for each square.', () => {
    expect(parseGrid(hard)).toEqual({
      "A1": "1459",
      "A2": "2459",
      "A3": "7",
      "A4": "13456",
      "A5": "3469",
      "A6": "8",
      "A7": "246",
      "A8": "245",
      "A9": "156",
      "B1": "14589",
      "B2": "459",
      "B3": "6",
      "B4": "1457",
      "B5": "2",
      "B6": "1579",
      "B7": "3",
      "B8": "4578",
      "B9": "1578",
      "C1": "1458",
      "C2": "3",
      "C3": "1258",
      "C4": "14567",
      "C5": "467",
      "C6": "1567",
      "C7": "24678",
      "C8": "24578",
      "C9": "9",
      "D1": "3489",
      "D2": "1",
      "D3": "289",
      "D4": "23478",
      "D5": "5",
      "D6": "237",
      "D7": "4789",
      "D8": "6",
      "D9": "378",
      "E1": "345689",
      "E2": "2459",
      "E3": "2589",
      "E4": "234678",
      "E5": "1",
      "E6": "2367",
      "E7": "4789",
      "E8": "345789",
      "E9": "3578",
      "F1": "34568",
      "F2": "7",
      "F3": "58",
      "F4": "9",
      "F5": "3468",
      "F6": "36",
      "F7": "1",
      "F8": "3458",
      "F9": "2",
      "G1": "1579",
      "G2": "59",
      "G3": "159",
      "G4": "1235678",
      "G5": "36789",
      "G6": "1235679",
      "G7": "26789",
      "G8": "23789",
      "G9": "4",
      "H1": "1579",
      "H2": "8",
      "H3": "3",
      "H4": "12567",
      "H5": "679",
      "H6": "4",
      "H7": "2679",
      "H8": "279",
      "H9": "67",
      "I1": "2",
      "I2": "6",
      "I3": "4",
      "I4": "378",
      "I5": "3789",
      "I6": "379",
      "I7": "5",
      "I8": "1",
      "I9": "378",
    })
  })

  test('find min square', () => {
    expect(findMinSquare(parseGrid(hard))).toEqual([2, 'F3'])
  })

  test('solve', () => {
    const [solution, stats] = norvigSolve(hard)
    expect(solution).toEqual(hardSolution)
  })
})
